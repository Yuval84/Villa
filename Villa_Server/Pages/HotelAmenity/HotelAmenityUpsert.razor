@page "/hotel-amenity/create"
@page "/hotel-amenity/edit/{Id:int}"
@using Business.Repository.IRepository
@using Models
@inject IAmenityRepository AmenityRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Amenity</h3>

    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                @* First Keep On Submit then change to onValidSubmit *@
                <EditForm Model="@HotelAmenityModel" OnValidSubmit="HandleHotelAmenityCreate">
                    <DataAnnotationsValidator />
                    @*Show validation summary <ValidationSummary/>*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelAmenityModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <InputTextArea @bind-Value="HotelAmenityModel.Description" class="form-control"></InputTextArea>
                        <ValidationMessage For="()=>HotelAmenityModel.Description"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Schedule</label>
                        <InputText @bind-Value="HotelAmenityModel.Schedule" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityModel.Schedule"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Icon Style</label>
                        <InputText @bind-Value="HotelAmenityModel.IconStyle" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityModel.IconStyle"></ValidationMessage>
                    </div>



                    <div class="form-group">
                        <button class="btn btn-primary"> @Title Amenity </button>
                        <NavLink href="@($"hotel-amenity")" class="btn btn-secondary">Back to Index </NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

</div>




@code {
    [Parameter]
    public int? Id { get; set; }

    internal HotelAmenityDto HotelAmenityModel { get; set; } = new HotelAmenityDto();
    internal string Title { get; set; } = "Create";
    internal bool IsProcessingStart { get; set; } = false;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState;
        if (!authenticationState.User.IsInRole(Common.SD.Role_Admin))
        {
            //direct the user to login page, with uri to indicate where to direct back after he is login
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }

        if (Id != null)
        {
            Title = "Update";
            HotelAmenityModel = await AmenityRepository.GetHotelAmenity(Id.Value);
        }
        else
        {
            HotelAmenityModel = new HotelAmenityDto();
        }
    }


    internal async Task HandleHotelAmenityCreate()
    {
        try
        {
            IsProcessingStart = true;
            if (HotelAmenityModel.Id != 0 && Title == "Update")
            {
                var amenityDetailsByName = await AmenityRepository.IsSameNameAmenityAlreadyExist(HotelAmenityModel.Name);
                if (amenityDetailsByName != null && amenityDetailsByName.Id != HotelAmenityModel.Id)
                {
                    await JsRuntime.ToastError("Hotel Amenity already exist.");
                    return;
                }

                var updateAmenityResult = await AmenityRepository.UpdateHotelAmenity(HotelAmenityModel.Id, HotelAmenityModel);
                await JsRuntime.ToastSuccess("Hotel Amenity Updated successfully");
            }
            else
            {
                var amenityDetailsByName = await AmenityRepository.IsSameNameAmenityAlreadyExist(HotelAmenityModel.Name);
                if (amenityDetailsByName != null)
                {
                    await JsRuntime.ToastError("Hotel Amenity already exist.");
                    return;
                }

                var createdAmenityResult = await AmenityRepository.CreateHotelAmenity(HotelAmenityModel);
                HotelAmenityModel = new HotelAmenityDto();
                await JsRuntime.ToastSuccess("Hotel Amenity created successfully.");
            }
            NavigationManager.NavigateTo("hotel-amenity");
            IsProcessingStart = false;
        }
        catch (Exception e)
        {
            IsProcessingStart = false;
            await JsRuntime.ToastError(e.Message);
        }
    }

}
