@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using Villa_Server.Service.IService
@using System.IO
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelRoomImagesRepository HotelRoomImagesRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary/>*@

                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="() => HotelRoomModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="() => HotelRoomModel.Occupancy"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Rate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="() => HotelRoomModel.RegularRate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Sq Ft.</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
                    </div>
                    <div class="form-group" style="height: 250px;">
                        <label>Details</label>
                        @*<InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>*@
                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter room details">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>

                            </EditorContent>
                        </BlazoredTextEditor>
                    </div>
                    <div class="form-group" style="padding-top: 70px;">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if (IsUploadImageProcessStarted)
                            {
                                <div class="col-md-12">
                                    <span><i class="fa fa-spin fa-spinner"></i> Please wait.. Images are uploading...</span>
                                </div>
                            }
                            @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                            {
                                int serial = 1;
                                foreach (var roomImage in HotelRoomModel.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@roomImage') 50% 50%">
                                            <span class="room-image-title">@serial</span>
                                        </div>
                                        <button type="button" @onclick="() => DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>
                                    serial++;
                                }
                            }
                        </div>
                    </div>



                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back To Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>





@code {
    [Parameter]
    public int? Id { get; set; }

    private HotelRoomDto HotelRoomModel { get; set; } = new HotelRoomDto();
    private string Title { get; set; } = "Create";
    private HotelRoomImageDto RoomImage { get; set; } = new HotelRoomImageDto();
    private List<string> DeleteImagesNames { get; set; } = new List<string>();
    private bool IsUploadImageProcessStarted { get; set; } = false;

    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState;
        if (!authenticationState.User.IsInRole(Common.SD.Role_Admin))
        {
            //direct the user to login page, with uri to indicate where to direct back after he is login
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }

        if (Id != null)
        {
            //update
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
            if (HotelRoomModel?.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            //create
            HotelRoomModel = new HotelRoomDto();
        }
    }

    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUniq(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailsByName != null)
            {
                //duplicate room name
                await JsRuntime.ToastError("Room name already exist.");
                return;
            }

            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                //update room
                HotelRoomModel.Details = await QuillHtml.GetHTML();
                var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                if ((HotelRoomModel.ImageUrls != null && HotelRoomModel.HotelRoomImages.Any()) ||
                    (DeleteImagesNames != null && DeleteImagesNames.Any())) //in case we have 1 image and try to delete it
                {
                    if (DeleteImagesNames != null && DeleteImagesNames.Any())
                    {
                        foreach (var deleteImagesName in DeleteImagesNames)
                        {
                            var imageName = deleteImagesName.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
                            var result = FileUpload.DeleteFile(imageName);

                            await HotelRoomImagesRepository.DeleteHotelRoomImageByImageUrl(deleteImagesName);
                        }
                    }
                    await AddHotelRoomImage(updateRoomResult);
                }

                await JsRuntime.ToastSuccess("Room updated successfully.");
            }
            else
            {
                //create room
                HotelRoomModel.Details = await QuillHtml.GetHTML();
                var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await AddHotelRoomImage(createdResult);
                await JsRuntime.ToastSuccess("Room created successfully.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }


        NavigationManager.NavigateTo("hotel-room");
    }

    private async Task AddHotelRoomImage(HotelRoomDto roomDetails)
    {
        foreach (var imageUrl in HotelRoomModel.ImageUrls)
        {
            if (HotelRoomModel.HotelRoomImages == null || !HotelRoomModel.HotelRoomImages.Any(x => x.RoomImageUrl == imageUrl))
            {
                RoomImage = new HotelRoomImageDto()
                {
                    RoomId = roomDetails.Id,
                    RoomImageUrl = imageUrl
                };
                await HotelRoomImagesRepository.CreateHotelRoomImage(RoomImage);
            }
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            IsUploadImageProcessStarted = true;
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastError("Please select .jpg/ .jpeg/ png file only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                        HotelRoomModel.ImageUrls.AddRange(images);
                    else
                        HotelRoomModel.ImageUrls = new List<string>(images);
                }
                else
                {
                    await JsRuntime.ToastError("Image uploading failed");
                }
            }
            IsUploadImageProcessStarted = false;
        }
        catch (Exception ex)
        {

            await JsRuntime.ToastError(ex.Message);
        }
    }


    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
            if (HotelRoomModel.Id == 0 && Title == "Create") //if delete in "Create" there is no need to delete from DB, only from images folder
            {
                var result = FileUpload.DeleteFile(imageName);
            }
            else
            {
                //update
                DeleteImagesNames ??= new List<string>();
                DeleteImagesNames.Add(imageUrl);
            }
            HotelRoomModel.ImageUrls.RemoveAt(imageIndex); //update the view because of the 'onchange' in the inputFile

        }
        catch (Exception ex)
        {
            await JsRuntime.ToastError(ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(HotelRoomModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(HotelRoomModel.Details);
                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }
    }

    //public void SetHTML()
    //{
    //    if (!string.IsNullOrEmpty(HotelRoomModel.Details))
    //    {
    //        this.QuillHtml.LoadHTMLContent(HotelRoomModel.Details);
    //    }
    //    StateHasChanged();
    //}
}
